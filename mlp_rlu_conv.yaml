!obj:pylearn2.train.Train {
    dataset : &trainset !obj:pylearn2.datasets.transformer_dataset.TransformerDataset {
        raw : !obj:GTZAN_dataset2d.GTZAN_dataset2d {
            which_set : 'train',
            config : &fold !pkl: "%(fold_config)s"
        },
        transformer : !obj:GTZAN_dataset2d.GTZAN_standardizer2d {
            config : *fold
        }
    },
    model : !obj:pylearn2.models.mlp.MLP {
        batch_size : 30,
        input_space: !obj:pylearn2.space.Conv2DSpace {
           shape: [40, 513],
           num_channels: 1
        },
        layers : [
            !obj:pylearn2.models.mlp.ConvRectifiedLinear {
                layer_name : 'h0',
                output_channels : 30,
                kernel_shape : [6, 513],
                pool_shape : [3, 1],
                pool_stride : [3, 1],
                irange : &irange .1
                },
            !obj:pylearn2.models.mlp.RectifiedLinear {
                layer_name : 'h1',
                dim : 50,
                irange : *irange
                },
            !obj:pylearn2.models.mlp.Softmax {
                n_classes : 10,
                layer_name : 'y',
                irange : *irange
                }
            ]
    },
    algorithm : !obj:pylearn2.training_algorithms.sgd.SGD {
        learning_rate : .01,
        learning_rule : !obj:pylearn2.training_algorithms.learning_rule.Momentum {
            init_momentum : 0.5
        },
        train_iteration_mode : 'shuffled_sequential', #'batchwise_shuffled_sequential',
        monitor_iteration_mode : 'sequential', #'batchwise_shuffled_sequential',
        #batches_per_iter : 500,
        #batch_size : 1200,
        monitoring_dataset : {
            'train' : *trainset,
            'valid' : !obj:pylearn2.datasets.transformer_dataset.TransformerDataset {
                raw : !obj:GTZAN_dataset2d.GTZAN_dataset2d {
                    which_set : 'valid',
                    config : *fold
                },
                transformer : !obj:GTZAN_dataset2d.GTZAN_standardizer2d {
                    config : *fold
                }
            }
        },
        termination_criterion: !obj:pylearn2.termination_criteria.MonitorBased {
            channel_name : 'valid_y_misclass',
            prop_decrease : .001,
            N: 5
        }#,cost : !obj:pylearn2.costs.mlp.Default {}
    },
    extensions: [
        !obj:pylearn2.train_extensions.best_params.MonitorBasedSaveBest {
             channel_name: 'valid_y_misclass',
             save_path: "%(best_model_save_path)s"
        },
        !obj:pylearn2.training_algorithms.learning_rule.MomentumAdjustor {
            start: 1,
            saturate: 50,
            final_momentum: .9
        },
        !obj:pylearn2.training_algorithms.sgd.LinearDecayOverEpoch {
            start: 1,
            saturate: 50,
            decay_factor: .01
        },
    ],
    save_path : "%(save_path)s",
    save_freq : 1
}